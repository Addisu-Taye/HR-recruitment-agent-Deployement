# render.yaml

# Use the official 'v1' tag for the YAML specification
version: v1 

services:
  # ----------------------------------------------------------------
  # 1. Django Backend (Web Service - API)
  # ----------------------------------------------------------------
  - type: web
    name: hr-recruitment-backend
    env: python
    region: frankfurt
    plan: starter # Use a paid tier for better stability than free
    rootDir: backend # <--- FIX 1: Specify the root directory for Django

    # Optimized buildCommand for PII/spaCy
    buildCommand: |
      pip install -r requirements.txt
      # Linking the model ensures spaCy can find it when Django initializes
      python -m spacy link en_core_web_md en_core_web_md --force
    
    # FIX 2: Correct Gunicorn path to run from the manage.py location (backend/)
    startCommand: "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn hr_core.wsgi:application"

    envVars:
      - key: SECRET_KEY
        generateValue: true
      - key: DEBUG
        value: "False"
      - key: WEB_CONCURRENCY
        value: "4"
      
      # FIX 3: Link the database using the internal name for security and speed
      - key: DATABASE_URL
        fromDatabase: hr-recruitment-db # Replace 'hr-recruitment-db' with the actual name of your PostgreSQL service
      
      # AI Service URLs
      - key: HF_SPACE_API_URL
        value: "YOUR_GRADIO_SPACE_API_URL"
      
      # Brevo/SMTP Config for Email
      - key: BREVO_SMTP_KEY
        generateValue: true # Securely store your Brevo SMTP key
      - key: BREVO_SMTP_LOGIN
        value: "your-brevo-login-email@example.com"
      
      # Celery/Redis Broker URL (Internal link to the Redis instance)
      - key: CELERY_BROKER_URL
        value: "redis://hr-recruitment-redis:6379/0" # Internal name link to the redis service

      - key: CORS_ALLOWED_ORIGINS
        value: "https://hr-recruitment-frontend.onrender.com"
        
  # ----------------------------------------------------------------
  # 2. Celery Worker (Background Service)
  # ----------------------------------------------------------------
  - type: worker
    name: hr-recruitment-worker
    env: python
    region: frankfurt
    plan: starter
    rootDir: backend # <--- FIX 1: Specify the root directory for Celery

    # Must use the same build command as the web service to get spaCy model
    buildCommand: |
      pip install -r requirements.txt
      python -m spacy link en_core_web_md en_core_web_md --force
      
    # Command to start the Celery worker process (needs to be run from the backend directory)
    startCommand: "celery -A hr_core worker -l info"
    
    envVars:
      - key: SECRET_KEY
        fromService: hr-recruitment-backend
      
      # FIX 4: Worker should inherit DATABASE_URL from the web service which got it from the database link
      - key: DATABASE_URL 
        fromDatabase: hr-recruitment-db  
        
      - key: CELERY_BROKER_URL
        value: "redis://hr-recruitment-redis:6379/0"

  # ----------------------------------------------------------------
  # 3. Redis Service (Message Broker for Celery)
  # ----------------------------------------------------------------
  - type: redis
    name: hr-recruitment-redis
    region: frankfurt
    plan: starter

  # ----------------------------------------------------------------
  # 4. React Frontend (Static Site)
  # ----------------------------------------------------------------
  - type: web
    name: hr-recruitment-frontend
    region: frankfurt
    runtime: static 
    
    rootDir: frontend
    
    buildCommand: "npm install && npm run build"
    publishPath: build 
    
    envVars:
      - key: REACT_APP_BACKEND_URL
        value: "https://hr-recruitment-backend.onrender.com"